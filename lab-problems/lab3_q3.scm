#lang racket
(require 2htdp/image)
(define (make-point x y)
  (cons x y))
(define (get-x p) (car p))
(define (get-y p) (cdr p))
(define (make-line p1 p2)
  (cons p1 p2))
(define (get-first-point l)
  (car l))
(define (get-second-point l)
  (cdr l))
(define (get-x1 l)
  (car (car l)))
(define (get-y1 l)
  (cdr (car l)))
(define (get-x2 l)
  (car (cdr l)))
(define (get-y2 l)
  (cdr (cdr l)))
(define (avg x y) (/ (+ x y) 2))
(define (mid-point l)
  (make-point (avg (get-x1 l) (get-x2 l)) (avg (get-y1 l) (get-y2 l))))
(define (length l)
  (sqrt (+ (* (- (get-x1 l) (get-x2 l)) (- (get-x1 l) (get-x2 l)))
           (* (- (get-y1 l) (get-y2 l)) (- (get-y1 l) (get-y2 l))))))
(define (rotated-line l)
  (make-line (get-second-point l)
             (make-point (+ (get-x2 l) (- (get-y1 l) (get-y2 l)))
                         (+ (get-y2 l) (- (get-x2 l) (get-x1 l))))))
(define p1 (make-point 2 100))
(define p2 (make-point 100 110))
(define ln (make-line p1 p2))
(define pMid (mid-point ln))

(define (draw-p lnV lnH pMid length)
(let ((vx2 (get-x2 lnV))
(vy2 (get-y2 lnV))
(hx2 (get-x2 lnH))
(hy2 (get-y2 lnH)))
(let ((i1 (line vx2 vy2 "black")))
(let ((i2 (add-line i1 0 0 hx2 hy2 "black")))
(let ((i3 (add-line i2 hx2 hy2 hx2 (- vy2 (/ length 2)) "black")))
(add-line i3 hx2 (- vy2 (/ length 2)) (get-x pMid) (get-y pMid) "black"))))))

(draw-p ln (rotated-line ln) pMid (length ln))

(circle 40 255 "red")

(rotated-line (make-line (make-point 150 150) (make-point 0 0)))