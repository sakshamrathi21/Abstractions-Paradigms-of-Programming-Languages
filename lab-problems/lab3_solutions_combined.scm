#lang racket
(require 2htdp/image)
(define (gcd a b)
  (cond ((<= a b) (gcd b a))
        (else (if (= (remainder a b) 0)
            b
            (gcd b (remainder a b))))))
(define (make-rat1 a b)
  (define g (gcd a b))
  (cons (/ a g) (/ b g)))
(define (make-rat a b)
  (cons a b))
(define (numer1 rat)
  (car rat))
(define (denom1 rat)
  (cdr rat))
(define (numer rat)
  (define g (gcd (car rat) (cdr rat)))
  (/ (car rat) g))
(define (denom rat)
  (define g (gcd (car rat) (cdr rat)))
  (/ (cdr rat) g))


(define (make-point x y)
  (cons x y))
(define (get-x p) (car p))
(define (get-y p) (cdr p))
(define (make-line p1 p2)
  (cons p1 p2))
(define (get-first-point l) (car l))
(define (get-second-point l) (cdr l))
(define (get-x1 l) (get-x (get-first-point l)))
(define (get-x2 l) (get-x (get-second-point l)))
(define (get-y1 l) (get-y (get-first-point l)))
(define (get-y2 l) (get-y (get-second-point l)))
(define (average a b) (/ (+ a b) 2))
(define (mid-point l)
  (make-point (average (get-x1 l) (get-x2 l))
              (average (get-y1 l) (get-y2 l))))
(define (square x) (* x x))
(define (length l)
  (sqrt (+ (square (- (get-x1 l)
                   (get-x2 l)))
           (square (- (get-y1 l)
                   (get-y2 l))))))
(define (rotated-line l)
  (make-line (get-second-point l)
             (make-point (+ (get-x2 l)
                            (get-y1 l)
                            (- (get-y2 l)))
                         (+ (get-y2 l)
                            (get-x2 l)
                            (- (get-x1 l))))))
(define p1 (make-point 100 100))
(define p2 (make-point 5 50))
(define ln (make-line p1 p2))
(define pMid (mid-point ln))
(define (draw-p lnV lnH pMid length)
      (let ((vx2 (get-x2 lnV))
            (vy2 (get-y2 lnV))
            (hx2 (get-x2 lnH))
            (hy2 (get-y2 lnH)))
        (let ((i1 (line vx2 vy2 "red")))
          (let ((i2 (add-line i1 0 0 hx2 hy2 "red")))
            (let ((i3 (add-line i2 hx2 hy2 hx2 (- vy2 (/ length 2)) "red")))
              (add-line i3 hx2 (- vy2 (/ length 2)) (get-x pMid) (get-y pMid) "red"))))))
