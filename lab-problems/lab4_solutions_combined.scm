#lang racket
(define (make-account balance pass)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        ("Insufficient Funds")))
  (define (deposit amount)
    (begin (set! balance (+ balance amount))
           balance))
  (define (dispatch input-pass m)
    (cond ((not (eq? input-pass pass)) (error "INCORRECT PASSWORD"))
          ((eq? m `withdraw) withdraw)
          ((eq? m `deposit) deposit)
          (else (error "Unknown request: MAKE-ACCOUNT" m))))
  dispatch)

(define (call-the-cops) (error "Calling fake police!"))
(define (make-account-cops balance pass)
  (define num-f 0)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        ("Insufficient Funds")))
  (define (deposit amount)
    (begin (set! balance (+ balance amount))
           balance))
  (define (dispatch input-pass m)
    (cond ((not (eq? input-pass pass))
           (begin (set! num-f (+ num-f 1))
                  (if (>= num-f 5) (call-the-cops)
                   (error "INCORRECT PASSWORD"))))
          (else (begin (set! num-f 0)
                       (cond ((eq? m `withdraw) withdraw)
                             ((eq? m `deposit) deposit)
                             (else (error "Unknown request: MAKE-ACCOUNT" m)))))))
  dispatch)

(define (make-monitored f)
  (define num-calls 0)
  (lambda (m)
    (cond ((eq? m `how-many-calls?) num-calls)
          ((eq? m `reset-count) (set! num-calls 0))
          (else (begin (set! num-calls (+ num-calls 1)) (f m))))))
