#lang sicp
(define (abs x)
  (cond ((> x 0) x)
        (else (- x))))
(define (xor a b)
  (or (and a (not b))
      (and (not a) b)))
(define (gcd x y)
  (cond ((< x y) (gcd y x))
        ((= y 0) x)
        (else (gcd y (remainder x y)))))
(define (make-rat n d)
  (let ((g (gcd (abs n) (abs d))))
    (if (xor (> n 0) (> d 0)) (cons (- (/ (abs n) g)) (/ (abs d) g)) (cons (/ (abs n) g) (/ (abs d) g)))))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define one-half (make-rat 1 2))
(define one-third (make-rat 1 -3))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(print-rat one-third)


